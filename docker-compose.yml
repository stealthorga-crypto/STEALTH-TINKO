version: '3.8'

services:
  # PostgreSQL database (production-ready alternative to SQLite)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: stealth_recovery
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MailHog for email testing (SMTP server + web UI)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    environment:
      MH_STORAGE: memory

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Database connection: use Neon via .env DATABASE_URL
      DATABASE_URL: ${DATABASE_URL}
      # JWT configuration
      JWT_SECRET: dev-secret-change-in-production-to-secure-random-string
      JWT_ALGORITHM: HS256
      JWT_EXPIRY_MINUTES: 1440
      # Redis
      REDIS_URL: redis://redis:6379/0
      # Email
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASSWORD: ""
      SMTP_FROM: noreply@stealth-recovery.dev
    depends_on:
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    volumes:
      - ./app:/app/app
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
      - ./tests:/app/tests
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # Frontend (Next.js)
  frontend:
    build:
      context: ./tinko-console
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: production
    depends_on:
      - backend

  # Celery Worker for async tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379/0
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASSWORD: ""
      SMTP_FROM: noreply@stealth-recovery.dev
    depends_on:
      - backend
      - redis
    volumes:
      - ./app:/app/app
    command: celery -A app.worker:celery_app worker -l info

  # Celery Beat for scheduled tasks
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - backend
      - redis
    volumes:
      - ./app:/app/app
    command: celery -A app.worker:celery_app beat -l info

volumes:
  postgres_data:
