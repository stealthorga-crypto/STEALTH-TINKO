TASK 5: SERVICES & WORKERS INVENTORY
====================================

Services found:
app/services/analytics.py
app/services/classifier.py
app/services/payments/base.py
app/services/payments/stripe_adapter.py
app/services/stripe_service.py

Workers/Tasks found:
app/tasks/notification_tasks.py
app/tasks/partition_tasks.py
app/tasks/retry_tasks.py
app/tasks/__init__.py

PSP Adapters found:
app/psp/adapter.py
app/psp/dispatcher.py
app/psp/razorpay_adapter.py
app/psp/stripe_adapter.py
app/psp/__init__.py

Worker.py content:
"""
Celery worker configuration for background tasks.
"""
import os
from celery import Celery
from celery.schedules import crontab

# Redis URL from environment
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL)
RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', REDIS_URL)

# Create Celery app
celery_app = Celery(
    'stealth_recovery',
    broker=BROKER_URL,
    backend=RESULT_BACKEND,
    include=['app.tasks.retry_tasks', 'app.tasks.notification_tasks']
)

# Celery configuration
celery_app.conf.update(
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    task_track_started=True,
    task_time_limit=300,  # 5 minutes max per task
    worker_prefetch_multiplier=1,
    worker_max_tasks_per_child=1000,
)

# Periodic tasks schedule
celery_app.conf.beat_schedule = {
    'process-retry-queue-every-minute': {
        'task': 'app.tasks.retry_tasks.process_retry_queue',
        'schedule': 60.0,  # Every 60 seconds
    },
    'cleanup-expired-attempts-daily': {
        'task': 'app.tasks.retry_tasks.cleanup_expired_attempts',
        'schedule': crontab(hour=2, minute=0),  # 2 AM daily
    },
}

if __name__ == '__main__':
    celery_app.start()
